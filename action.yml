name: "WireGuard Peer Provisioner"
description: "Create WireGuard peer, connect VPN, schedule auto-deletion, and cleanup"
inputs:
  api_url:
    description: "Base URL of TGTH WireGuard API Client"
    required: true
  api_key:
    description: "API key for TGTH WireGuard API Client"
    required: true
  peer_name:
    description: "Name for peer (default uses GitHub run ID)"
    required: false
    default: "tgth-github-runner-${{ github.run_id }}"

outputs:
  peer_id:
    description: "Peer ID of created peer"
  wg_conf_path:
    description: "Path to WireGuard config file"

runs:
  using: "composite"
  steps:
    - name: Check Runner Environment
      id: gcp-check
      shell: bash
      run: |
        if curl -s -H "Metadata-Flavor: Google" --connect-timeout 1 http://metadata.google.internal/computeMetadata/v1/; then
          echo "Running on GCP VM"
          echo "on_gcp=true" >> "$GITHUB_OUTPUT"
        else
          echo "Not running on GCP"
          echo "on_gcp=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Ensure requirements installed
      shell: bash
      run: |
        echo "üîç Checking required dependencies..."

        check_and_install() {
          if ! command -v "$1" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è $1 not found. Installing..."
            sudo apt update -y
            sudo apt install -y "$2"
          else
            echo "‚úÖ $1 is already installed."
          fi
        }

        check_and_install wg-quick wireguard
        check_and_install jq jq
        check_and_install curl curl
        check_and_install uuidgen uuid-runtime

        echo "‚úÖ All required tools are now installed."

    - name: Create WireGuard Peer
      id: create-peer
      if: steps.gcp-check.outputs.on_gcp == 'false'
      shell: bash
      run: |
        response=$(curl -s -X POST "${{ inputs.api_url }}/peers/full" \
          -H "tgth-api-key: ${{ inputs.api_key }}" \
          -H "Content-Type: application/json" \
          -d "{\"name\": \"${{ inputs.peer_name }}\"}")

        echo "$response" > create-peer.json

        # Extract peer_id and config from the response
        peer_id=$(echo "$response" | jq -r '.peer_id')
        config=$(echo "$response" | jq -r '.config')

        # Create wg.conf file
        echo "$config" > wg.conf
        echo "‚úÖ WireGuard configuration file created with peer ID: $peer_id"

    - name: Connect to WireGuard VPN
      if: steps.gcp-check.outputs.on_gcp == 'false'
      shell: bash
      run: |
        sudo wg-quick up ./wg.conf
        echo "‚úÖ WireGuard VPN connected"

    - name: Cleanup WireGuard VPN (always run)
      if: always() && steps.gcp-check.outputs.on_gcp == 'false'
      shell: bash
      run: |
        sudo wg-quick down ./wg.conf || echo "‚ö†Ô∏è wg down failed"

branding:
  icon: "activity"
  color: "red"
